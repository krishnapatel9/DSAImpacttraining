Q:Maximum product of SubArray Elements:
arr: [2,3,-6,4]
initialize product=1.
In the subarray,If we have even positive numbers then product will be positive.
If we have odd negative numbers then product will be negative.
In the subarray if we have atleast a 0,start product variable with 1.
If we have negative value,the product of prefix elements will be positive and of suffix elements will be negative.

[2,3,-6,4,0,5,2,3,-1,0,7,8,9,-3]
pre=1 suf=1 max=infinity.

 public static int maxProductSubArray(int[]arr){
       int n=arr.length;
       int pre=1,suff=1;
       int ans=Integer.MIN_VALUE;
       for(int i=0;i<n;i++){
           if(pre==0) pre=1;
           if(suff==0) suff=1;
           pre*= arr[i];
           suff*= arr[n-i-1];
           ans=Math.max(ans,Math.max(pre,suff));
       }
       return ans;
        }

Q:4,88,15,56,229,875,1358,424,162,1011

Q:162
class Solution {
    public int findPeakElement(int[] nums) {
        int l=0;
        int r=nums.length-1;
        while(l<r){
            int mid=l+(r-l)/2;
            if(nums[mid]<nums[mid+1]){
                l=mid+1;
            }
            else{
                r=mid;
            }}
            return r;
        
    }
}


Q:875 KokoEatingBananas
1.Check the elemenst till max
2.loop index 0 - max
3.initialize left = 0,right = max
4.get the middle value 
5.divide array elements
6.get the ceil values
7.add all those ceil values 
8.compare with target hours
9.if its <= eliminate right half
10.change right to mid-1
11.if the sum > target hour ,eliminate left half
12.change left =mid+1
13.return left


Object oriented programming:
Abstracttion,Inheritance ,Polymorphism,Encapsulation
and to achieve those properties,the prerequisite are class,object,constructor,interface.
class:virtual entity and blueprint of object
object:instance of class ,method calling in class 
constructor:initializing the object (Default-for every class,Parameterized)

Inheritance:
From Class , inherit properties using keyword:extend
4 types(single,multiple,multilevel,heiarchical)
single : (Base) Parent (1) ----> (Derived) Child
multilevel: 3 Levels Grandparent (Base)----> Parent (Base as well as Child) ----> Child (Derived)
multiple : (Base) Parent (>1) ----> (Derived) Child
heirachical : Parent (Base) ----> (Derived) Child (>1)

Polymorphism : Same Method with multiple Parameters.
From Interfaces , inherit properties using keyword:implement
2 types : 
Method Overloading ( A class with same method_name with different parameters ), 
Method Overriding ( declaring same method( method_name , parameters) in child and parent ).

-------->>>>>>>Main can be overriding with different parameters.<<<<<<<--------

Encapsulation : Binding Method and Data along with hiding sensitive data.
For private variables,we can't access outside the class,further using methods can access.

Abstraction : Showing essential details.
4 types : Data Abstraction,Functional Abstraction,Procedural Abstraction,Control Abstraction
Method Abstraction using keyword abstract
Class containing abstract(incomplete) method must be abstract.

Interface : Contains all Abstract Methods and no object.
