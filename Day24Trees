 NON - LINEAR DATA STRUCTURES
________________________________

 1. Trees
 2. Graphs 
 3. Heaps


------------
 * TREES 
------------

 - Trees are acyclic graphs. Acyclic graphs doesn't form any cycles.
 - Tree Creation  : we have to create  anode which contains data as well as left and right pointers.
 - The starting node is called a root node . Eventually every node is a root node. Whatever nodes are added to the root node are known as child nodes.
 - Every node is a root node . As every node shares the same properties we use recursion.

 - Types of trees :
 
 1. N-array Tree -  A root node can have "n" number of child nodes. Eg. Tries Tree
 2. Binary tree - A root node can have maximum 2 children. Eg.  Binary Search Tree , AVL Tree & Red-Black tree , Segment Tree . 


 TRAVERSALS : 
 
 - There are two types of traversals :
 1. Breadth first search
 2. Depth first search

------------
 1. DFS
------------
 - There are 3 types of DFS traversals :

 1. PreOrder     : Root Left Right
 2. InOrder      : Left Root Right
 3. PostOrder    : Left Right Root

				 1		Preorder  : 1 2 4 5 3 6 7
			       /   \		Inorder   : 4 2 5 1 6 3 7
			      2     3		Postorder : 4 5 2 6 7 3 1
			     / \   / \
			    4   5 6   7 
 
 HEIGHT AND DIAMETER OF TREES
------------------------------

 - Diameter of tree = height(left most tree) + height(right most tree) + 1

__________________________

	BINARY TREE
__________________________

 1. Complete binary tree :  every level should be filled and after completion of both right and left part of the tree only we can move to next level. It addition of nodes should start from          	 left to right
 2. Full Binary tree :  either the node should contain 0 or 2 child nodes not 1
 3. Perfect Binary Tree : every level should be complete and every node contain exactly 2 child node neither less nor more.
 
-----------------------
1. BINARY SEARCH TREE
-----------------------

 - Rule  : left < root < right for binary tree creation. 
 - There is a big advantage of getting sorted elements in BST.
 - Disadvantage is that the tree might becomes skew so it's time complexity becomes O(n).

BALANCED Tree :   height(left tree) - height(right tree) should be equal to 0,-1,1 then it will be called as balanced tree.
 

-----------------------
 2. AVL Tree
-----------------------

 - Avl tree is a self - balancing tree.
 - There are 4 types : 
	a. left-left
        b. right -right
        c. left-right
        d. right-left
 - for each case we perform right rotation or left rotation to make the tree balanced

------------------------
 3. SEGMENT Tree
------------------------

 - In an array , if we wan to get the sum of particular range values we will use a simple for loop and it will give time complexity O(n) but we want to get the output in O(log n) .
   So, we will use segment tree to get the target output in O(log n) time complexity.
 - We can use segment trees when we have range queries.

