Linear Search:
Time complexity:O(n)
for(index  0-n){
      if(arr[i]==target){
          target=arr[i];
          }
}

Binary Search:
Time Complexity:log(n)
For sorted array ,implementing Binary Search
Step1:initialize l at index 0 ,r at n-1
Step2:loop within l,r and break whenever they crosses each other.
Step3:Find mid value i.e. (l+r)/2
Step4:Compare mid ,target
Step5:if mid==target ,return mid
Step6:if mid<target ,means target in right half side of an array so l=mid+1.
Step7:if mid>target ,means target in left half side of an array so r=mid-1.

for(index 0-n){
  if(arr[mid]==target){
      return mid;
    }else if(arr[mid]<target){
       l=mid+1;
   }else{
       r=mid-1;
}
}

//Code//
import java.util.*;
class Main {
    
    public static int BinarySearch(int arr[],int target){
        
        int l=0;
        int r=arr.length-1;
        
        while (l <= r) {
            int mid = l + (r - l) / 2; 

            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return -1;
    }
    public static void main(String[] args) {
        int arr[]={1,2,3,4,5,6,7,8};
        int target =7;
        int res=BinarySearch(arr,target);
        System.out.println(res);
    }
}




Q:BinarySearch in rotated sorted array.
if mid<l,means left side unsorted.    
if target>l and target<mid,so target between l ,mid(left side) so decrease r=mid-1.
if right side is unsorted, target>r and target<mid so increase l=mid+1.


Step1:initialize l,r at index 0,n-1.
Step2:loop between l,r.
Step3:find which half array is sorted.
Step4:if arr[mid]<arr[l] means right half side of an array is sorted.
        if target lies in between arr[l], arr[mid](left side )
           so decrease r=mid-1
        else target lies in (right side ),
           so increase l=mid+1.
Step5:if arr[mid]>arr[l] means left half array is sorted.
        if target lies in between arr[r], arr[mid](right side )
           so decrease r=mid+1
        else target in (left side ),
           so increase l=mid

//Code//
class Main {

    public static int BinarySearch(int arr[], int target) {

        int left = 0;
        int right = arr.length - 1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (arr[mid] == target) {
                return mid;
            }

            // Left half is sorted
            if (arr[left] <= arr[mid]) {
                if (arr[left] <= target && target < arr[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            // Right half is sorted
            else {
                if (arr[mid] < target && target <= arr[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }

        return -1; // not found
    }

    public static void main(String[] args) {
        int arr[] = {7, 8, 1, 2, 3, 4, 5, 6};
        int target = 7;
        int res = BinarySearch(arr, target);
        System.out.println(res);  // Output should be 0
    }
}

FInd the lower ,upper bound of an element.
