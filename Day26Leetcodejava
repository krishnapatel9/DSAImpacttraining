Q:42 trapping rain water
-->2 pointers iterate l,r
-->2 pointers checking conditions: l_max, r_max
-->condition is min(l_max,r_max)
-->update sum

    n = length of height

    left = 0
    right = n - 1
    left_max = 0
    right_max = 0
    water = 0

    while left < right:
        if height[left] < height[right]:
            if height[left] >= left_max:
                left_max = height[left]
            else:
                water += left_max - height[left]
            left += 1
        else:
            if height[right] >= right_max:
                right_max = height[right]
            else:
                water += right_max - height[right]
            right -= 1

    return water

Segment trees, fenwick tree
A Segment Tree is a binary tree used for storing information about intervals, or segments.
It allows efficient range queries and updates on an array.

3 rules:
a)if out of range : cancel
b)if within the range : read
c)if overlapping : Enter next child node of tree

sum of subarray : index(1,3)
array : [5,4,3,2,1]
index :  0,1,2,3,4
                  15
                /    \
               12     3         
              / \    / \
             9  +3 +2  -1
            / \   
          -5  +4


tree:
         1
       /   \
      2     3
     / \   / \
    4   5 6   7

queue to store initially Node --> 1
then before return .left and .right before popping 1
pop 1 return 2,3
pop 2 return 4,5
pop 3 return 6,7

